					+PRO GIT NOTES & CHEAT SHEET+ by Alanah

Topics not covered: 3.5 Remote Branches, pg 58 | 3.6 Rebasing, pg 63 | Chp 4 - Git on the Server, pg 71

:: GIT INIT ::
--------------------------------------------------------------------------------------------------------
git init : starts to track an existing project directory in git

**Note: To start tracking an existing directory or file, first do git add . and then do an initial commit (git commit m ’initial project version’) so that there is a starting point.


:: GIT CLONE ::
--------------------------------------------------------------------------------------------------------
git clone [url] : retrieves a copy of an existing repo that you'd like to contribute to. eg. git clone git://github.com/schacon/grit.git

git clone git://github.com/schacon/grit.git mygrit : If you want to clone the repository into a  						     directory name other than grit

git clone [repo1] [repo2] : clone a repo within the same working directory

git clone --bare [repo_name] [repo.git] : creates a bare repo w/ no working directory (commonly used for sharing)

**Note: repos ending in .git are bare repositories

:: GIT STATUS ::
--------------------------------------------------------------------------------------------------------
git status : determines which files are in which state


:: GIT DIFF ::
--------------------------------------------------------------------------------------------------------
git diff : shows exactly what was changed in the files, but not yet staged 

git diff -cached : see what you’ve staged that will go into your next commit

git diff -staged : compares your staged changes to your last commit

git diff --check : checks for whitespace errors and lists them (commonly used before committing)

Windows key + Q : exits out of git diff

**Note: git diff by itself doesn’t show all changes made since your last commit — only changes that are still unstaged.


:: GIT COMMIT :: Every time you commit, you’re recording a snapshot of your project that you can revert to or compare to later
--------------------------------------------------------------------------------------------------------
git commit -v : pass -v option for an even more explicit reminder of what you’ve modified, Doing so 		also puts the diff of your change in the editor so you can see exactly what you did.

git commit -m "Story 182: Fix benchmarks for speed" : commit on one line

git commit -a : skips the staging area (makes git automatically stage every file that is already 			tracked before doing the commit, letting you skip the git add part)

git commit --amend :  undo your last commit / or redo the last commit message

**Note: if you commit and then realize you forgot to stage the changes in a file you wanted to add to the commit, you can do something like this:

$ git commit -m ’initial commit’
$ git add forgotten_file
$ git commit --amend

**All 3 of these commands end up with a single commit—the second command replaces the results of the first**


:: .gitignore Patterns ::
--------------------------------------------------------------------------------------------------------
*.a       # no .a files
!lib.a    # but do track lib.a, even though you’re ignoring .a files above
/TODO     # only ignore the root TODO file, not subdir/TODO
build/    # ignore all files in the build/ directory
doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt


:: GIT ADD ::
--------------------------------------------------------------------------------------------------------
git add <file> : adds a file to staging

git add . : adds all files in the directory to staging

git add --patch : partially stage files


:: GIT RM ::
--------------------------------------------------------------------------------------------------------
git rm : removes a file from Git - you have to remove it from your tracked files (more accurately,
	 remove it from your staging area) and then commit. It also removes the file from your working 	 	 directory so you don’t see it as an untracked file next time around

git rm --cached readme.txt : keeps a file in your working tree but removes it from your staging area. 			     In other words keep the file on your hard drive but not have Git track it 	 		     anymore

git rm \*˜ : This command removes all files that end with .

**Note: If you simply remove the file (without the git command) from your working directory (rm file_name), it shows up under the “Changed but not updated” (that is, unstaged) area of your git status output. Then, if you run git rm, it stages the file’s removal: deleted: file_name

**Note: If you modified the file and added it to the index already, you must force the removal with the
-f option. This is a safety feature to prevent accidental removal of data that hasn’t yet
been recorded in a snapshot and that can’t be recovered from Git.

**Note: You can pass files, directories, and file-glob patterns to the git rm command. That means you can do things such as 'git rm log/\*.log' (this removes all files that have the .log extension in the log/ directory)


:: GIT MV ::
--------------------------------------------------------------------------------------------------------
git mv file_from file_to : If you want to rename a file in Git

Equivalent to the above ^ would be:

$ mv README.txt README
$ git rm README.txt
$ git add README


:: GIT LOG ::
--------------------------------------------------------------------------------------------------------
git log : view history of commits

git log -p : shows the diff introduced in each commit / show the patch introduced with each commit

git log -2 : shows the diff introduced in each commit and limits the out to only two entries

git log p -2 : This option displays the same info but with a diff directly following each entry.

git log -n : You can specify the # of the latest commits (note that by default pipes all output through 	     a pager so you see only one page of log output at a time.

git log --stat : abbreviated stats for each commit / show statistics for files modified in each commit

git log --shortstat : Display only the changed/insertions/deletions line from the –stat command

git log --name-only : Show the list of files modified after the commit information

git log --name-status : Show the list of files affected with added/modified/deleted info as well

git log --abbrev-commit : Show only the first few characters of the SHA-1 checksum instead of all 40

git log --relative-date : Displays the date in a relative format (eg, “2 weeks ago”) instead of using 			  the full date format.

git log --graph : Display an ASCII graph of the branch and merge history beside the log output

git log --pretty : Shows commits in an alternate format. Options include oneline, short, full, fuller, 		   and format (where you specify your own format).

git log --pretty=oneline : prints each commit on a single line

git log --pretty=short : short version

git log --pretty=full : long version

git log --pretty=fuller : full information

git log --pretty=format:"%h - %an, %ar : %s" - allows you to specify your own log output format.

git log --pretty=format:"%h %s" --graph : adds an ASCII graph showing your branch and merge history

Git Log Format Options:

Option Description of Output
%H Commit hash
%h Abbreviated commit hash
%T Tree hash
%t Abbreviated tree hash
%P Parent hashes
%p Abbreviated parent hashes
%an Author name
%ae Author e-mail
%ad Author date (format respects the date= option)
%ar Author date, relative
%cn Committer name
%ce Committer email
%cd Committer date
%cr Committer date, relative
%s Subject


git log --max-count=# : show's the max # of commits
(git log --pretty=oneline --max-count=2)

git log --since : you can specify a specific date (“2008–01–15) or a relative date (2 years 1 day 3 		  minutes ago)

git log --since, --after : Limit the commits to those made after the specified date
(git log --pretty=oneline --since='5 minutes ago')

git log --until :

git log --until, --before : Limit the commits to those made before the specified date

git log --since=2.weeks : gets the list of commits made in the last two weeks

git log --author : filter commits by author
(git log --pretty=oneline --author=<your name>)


git log --committer : Only show commits in which the committer entry matches the specified string

git log --grep : search for keywords in the commit messages

git log --all-match : specify both author and grep options or the command will match commits w/ either

git log <path> or <file_name> : you can specify a directory or filename & limit the log output to 				commits that introduced a change to those files

git log --pretty="%h:%s" --author=gitster --since="2008-10-01" \ --before="2008-11-01" --no-merges -- t/ 				if you want to see which commits modifying test files in the Git source code history 			were committed by Junio Hamano and were not merges in the month of
			October 2008

git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short



:: GIT RESET :: (Modify/Delete/Revert Commit)
--------------------------------------------------------------------------------------------------------
git reset --hard <sha1-commit-id> or <tag_name> : Use git log to locate the commit you wish to back up to !!CAREFUL!! / THIS WILL DELETE YOUR WORKING DIRECTORY CHANGES IF YOU ARE SITTING ON THE COMMIT  

git reset --hard HEAD : gets rid of WORK IN PROGRESS. It will reset you back to the most recent commit, and erase all the changes in your working tree and index

git reset HEAD <file> : you’ve changed two files and want to commit them as two separate changes, but 			       		you accidentally type git add * and stage them both. You can unstage one of  			        	the two by first viewing git status then issuing the commmand

git revert HEAD --no-edit : Undo's a committed change / --no-edit generates the default output without opening the editor

git push origin HEAD --force : If you've already pushed, a force push well remove it


**NOTE: If others may have pulled your work, then it's best to start a new branch because when they do a pull request, it will just merge it into their work, and you will get it pushed back up again



:: GIT GUI - GITK HISTORY VISUALIZER :: 
--------------------------------------------------------------------------------------------------------
gitk : opens commit history GUI



:: HOW TO UNSTAGE A STAGED FILE ::
--------------------------------------------------------------------------------------------------------
git checkout -- <file> : Reverts back to the last commit / This makes actual changes to the file itself


**Note: Anything you lose that was never committed is likely never to be seen again.



:: GIT REMOTE ::
--------------------------------------------------------------------------------------------------------

git remote

git remote -v : shows the current remote urls for the repo directory you are currently in

git remote add [shortname] [url] : addS a new remote Git repository as a shortname you can reference easily
				    eg. git remote add pb git://github.com/paulboone/ticgit.git
			            eg. git fetch pb  

git remote rm [remote-name] : removes a remote from the git remote -v list

git remote show	[remote-name] or [short-name] : see more information about a remote and which branch you 						will be pushinh/pulling to

git remote rename : changes a remote's shortname / eg. git remote rename pb paul	



:: GIT FETCH :: (pulls down changes from the repo)
--------------------------------------------------------------------------------------------------------
git fetch [remote-name] : retrieve datea from a remote project but does not merge it with your current 			  branch or directory (1-step process)


git fetch origin : fetches data from the server and syncs it with your local database/working directory

**Note: It’s important to note that the fetch command pulls the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.

**If another developer has pushed their work to the repo before you, then you would normally need to use git fetch followed by git merge to merge the other person's work into your own before it will allow you to push back to the server.


:: GIT PULL ::
--------------------------------------------------------------------------------------------------------
git pull : automatically fetches and then merges a remote branch into your current branch or the code you 	   	   are working on (2-step process)

**Note: git pull is the equivalent to the two steps: get fetch, git merge origin/master

:: GIT PUSH ::
--------------------------------------------------------------------------------------------------------
git push [remote-name] [branch-name] : this command is used once you are ready to push your work up to 				       github server eg. git push origin master

**Note: This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. You’ll have to pull down their work first and incorporate it into yours before you’ll be allowed to push.

git push shared master : shared is the name of the repository receiving the changes we are pushing. 


:: GIT TAG ::
--------------------------------------------------------------------------------------------------------
git tag : alphabetically lists the available tags in git

git tag -l ’v1.4.2.*’ : searches a tag with a pattern / this example shows the 1.4.2 series


git tag -a v1.4 -m ’my version 1.4’ : this is how you would specify an annotated tag / The -m 					      specifies a tagging message, which is stored with the tag.

git tag -s v1.5 -m ’my signed 1.5 tag’ : this is a tag signed with GPG (private key needed)
 
git tag v1.4-lw : the commit checksum stored in a file, no other info is kept

git tag -v [tag-name] : verify a signed tag (You need the signer’s public key in your keyring for this to 	  		work properly)

git tag -a v1.2 9fceb02 : tags an existing commit (specify the commit checksum (or part of it) at the end of 			  the command. You can view commits easily w/ git log --pretty=oneline)

git tag -d [tag-name] : deletes a specifed tag

git push origin --tags : pushes all of your tags to the remote server that are not already there

**Note: Git uses two main types of tags: lightweight and annotated. A lightweight tag is very
much like a branch that doesn’t change — it’s just a pointer to a specific commit.
Annotated tags, however, are stored as full objects in the Git database. They’re checksummed;
contain the tagger name, e-mail, and date; have a tagging message; and can
be signed and verified with GNU Privacy Guard (GPG). It’s generally recommended
that you create annotated tags so you can have all this information; but if you want a
temporary tag or for some reason don’t want to keep the other information, lightweight
tags are available too.

**Note: By default, the git push command doesn’t transfer tags to remote servers. You will
have to explicitly push tags to a shared server after you have created them. This process
is just like sharing remote branches you can run git push origin [tagname]. 


:: GIT SHOW ::
--------------------------------------------------------------------------------------------------------
git show : shows the tag data along with the commit that was tagged by using the git show command



:: GIT ALIASES ::
--------------------------------------------------------------------------------------------------------
Set git aliases:

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

git config --global alias.unstage ’reset HEAD --’ : Adds your own unstage alias to Git (git unstage)

git config --global alias.last ’log -1 HEAD’ : see the last commit easily (git last)

git config --global alias.visual "!gitk" : run an external command (start the command with !)



:: GIT BRANCHING/CHECKOUT ::
--------------------------------------------------------------------------------------------------------

git branch : lists local branches by default

git branch -a : lists all branches

git branch <branch_name> : creates a new branch (doesn't switch to it, just creates it so you are still on master)

git checkout <branch_name> : switches to an existing branch

git checkout -b <branch_name> : creates a branch and switches to it at the same time

git checkout <tag> : check out by tag name

git checkout tag^ : ^ checks out the first ancestor of the specified tag (use: <tag_name>~1 if other command doesn't work)

git branch -d <branch_name> : deletes a branch

git branch -D <branch_name> : forces a branch deletion (you will lose all work on that branch)

git branch -v : view the last commit on each branch

git branch --merged : view which branches are already merged into the branch you're on

git branch --no-marged : view all branches that contain work that you have not merged in yet

**Note: Branches on --merged list without the * in front of them are generally fine to delete with git branch -d; you’ve already incorporated their work into another branch, so you’re not going to lose anything.


:: GIT MERGE ::
--------------------------------------------------------------------------------------------------------

git merge <branch_name> : merges branch with your master branch (issue this command while on master branch)

git merge master : merges the master branch to the branch you are currently on

git mergetool : visual merge tool that walks you through conflicts

**Note: checkout the branch you wish to merge into


- GIT MERGE CONFLICT -

+git status shows files which are unmerged

+manually open the files in question and resolove the conflict

+remove <<<<<<<, >>>>>>>, ======= and replace corrected info in both files

+run git add on EACH file to mark it as resolved

+run git commit to finalaize the merge commit


Conflict file example: (two files separated by =======)

<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
please contact us at support@github.com
</div>
>>>>>>> iss53:index.html

:: GIT REBASE :: pg. 63
--------------------------------------------------------------------------------------------------------
git rebase --i : squashes multiple commits into a single commit making it easier for a maintainer to review


:: WHEN TO REBASE, WHEN TO MERGE? :: (GIT IMMERSION, LAB #34)

Don’t use rebase...

    1) If the branch is public and shared with others. Rewriting publicly shared branches will tend to screw up other members of the team.

    2) When the exact history of the commit branch is important (since rebase rewrites the commit history).

- Given the above guidelines, I tend to use rebase for short-lived, local branches and merge for branches in the public repository.


:: GIT FORK ::
--------------------------------------------------------------------------------------------------------
- Clicking the “Fork” button on a project page, creates your own writable fork of the project. You will then need to add in this new repository URL as a second remote

**Note: You need to push your work up to it. It’s easiest to push the remote branch you’re
working on up to your repository, rather than merging into your master branch and pushing that up. The reason is that if the work isn’t accepted or is cherry picked, you
don’t have to rewind your master branch.


:: GIT CAT ::
--------------------------------------------------------------------------------------------------------
cat <file.rb> : outputs the contents of the file

:: OTHER GIT RESOURCES :: 
--------------------------------------------------------------------------------------------------------
Both gitx (for Macs) and gitk (any platform) are useful in exploring log history


:: GIT SERVER STARTUP :: (INSTRUCTIONS)
--------------------------------------------------------------------------------------------------------
# (From the work directory)
git daemon --verbose --export-all --base-path=.

Now, in a separate terminal window, go to your work directory

