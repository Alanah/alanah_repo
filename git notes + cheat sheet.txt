Commands:

:: GIT INIT ::

git init : starts to track an existing project directory in git

**Note: To start tracking an existing directory or file, first do git add . and then do an initial commit (git commit m ’initial project version’) so that there is a starting point.


:: GIT CLONE ::

git clone [url] : retrieves a copy of an existing repo that you'd like to contribute to. eg. git clone git://github.com/schacon/grit.git

git clone git://github.com/schacon/grit.git mygrit : If you want to clone the repository into a  						     directory name other than grit

:: GIT STATUS ::

git status : determines which files are in which state


:: GIT DIFF ::

git diff : shows exactly what was changed in the files, but not yet staged 

git diff -cached : see what you’ve staged that will go into your next commit

git diff -staged : compares your staged changes to your last commit

Windows key + Q : exits out of git diff

**Note: git diff by itself doesn’t show all changes made since your last commit — only changes that are still unstaged.


:: GIT COMMIT ::

git commit -v : pass -v option for an even more explicit reminder of what you’ve modified, Doing so 		also puts the diff of your change in the editor so you can see exactly what you did.

git commit -m "Story 182: Fix benchmarks for speed" : commit on one line

git commit -a : skips the staging area (makes git automatically stage every file that is already 			tracked before doing the commit, letting you skip the git add part)


**Note: Every time you perform a commit, you’re recording a snapshot of your project that you can revert to or compare to later.


:: .gitignore Patterns ::

*.a       # no .a files
!lib.a    # but do track lib.a, even though you’re ignoring .a files above
/TODO     # only ignore the root TODO file, not subdir/TODO
build/    # ignore all files in the build/ directory
doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt

:: GIT RM ::

git rm : removes a file from Git - you have to remove it from your tracked files (more accurately,
	 remove it from your staging area) and then commit. It also removes the file from your working 	 	 directory so you don’t see it as an untracked file next time around

git rm --cached readme.txt : keeps a file in your working tree but removes it from your staging area. 			     In other words keep the file on your hard drive but not have Git track it 	 		     anymore

git rm \*˜ : This command removes all files that end with .

**Note: If you simply remove the file (without the git command) from your working directory (rm file_name), it shows up under the “Changed but not updated” (that is, unstaged) area of your git status output. Then, if you run git rm, it stages the file’s removal: deleted: file_name

**Note: If you modified the file and added it to the index already, you must force the removal with the
-f option. This is a safety feature to prevent accidental removal of data that hasn’t yet
been recorded in a snapshot and that can’t be recovered from Git.

**Note: You can pass files, directories, and file-glob patterns to the git rm command. That means you can do things such as 'git rm log/\*.log' (this removes all files that have the .log extension in the log/ directory)

:: GIT MV ::

git mv file_from file_to : If you want to rename a file in Git


